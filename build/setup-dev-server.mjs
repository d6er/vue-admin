import fs from 'fs'
import path from 'path'
import webpack from 'webpack'
import MFS from 'memory-fs'
import clientConfig from './webpack.client.development.config'
import serverConfig from './webpack.server.config'

const readFile = (fs, file) => {
  try {
    return fs.readFileSync(path.join(clientConfig.output.path, file), 'utf-8')
  } catch (e) {}
}

const setupDevServer = async (app, templatePath, cb) => {
  let bundle
  let template
  let clientManifest
  
  let ready
  
  const readyPromise = new Promise(r => { ready = r })
  const update = () => {
    if (bundle && clientManifest) {
      ready()
      cb(bundle, {
        template,
        clientManifest
      })
    }
  }

  template = fs.readFileSync(templatePath, 'utf-8')

  // dev middleware
  const clientCompiler = webpack(clientConfig)
  const webpackDevMiddleware = await import('webpack-dev-middleware')
  const devMiddleware = webpackDevMiddleware.default(clientCompiler, {
    publicPath: clientConfig.output.publicPath,
    noInfo: true
  })
  app.use(devMiddleware)
  clientCompiler.plugin('done', stats => {
    stats = stats.toJson()
    stats.errors.forEach(err => console.error(err))
    stats.warnings.forEach(err => console.warn(err))
    if (stats.errors.length) return
    clientManifest = JSON.parse(readFile(
      devMiddleware.fileSystem,
      'vue-ssr-client-manifest.json'
    ))
    update()
  })

  // hot middleware
  const webpackHotMiddleware = await import('webpack-hot-middleware')
  app.use(webpackHotMiddleware.default(clientCompiler, { heartbeat: 5000 }))

  // watch and update server renderer
  const serverCompiler = webpack(serverConfig)
  const mfs = new MFS()
  serverCompiler.outputFileSystem = mfs
  serverCompiler.watch({}, (err, stats) => {
    if (err) throw err
    stats = stats.toJson()
    if (stats.errors.length) return

    // read bundle generated by vue-ssr-webpack-plugin
    bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'))
    update()
  })

  return readyPromise
}

export { setupDevServer }
